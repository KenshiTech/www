[heading Security Considerations]

There are a few security considerations and best practices to take into account when
creating a custom oracle and deploying it to the Kenshi Oracle Network. Although not
required, they are highly recommended.

[heading :size 2 Gas]

Gas fees stored in associated gas wallets are not insured. Kenshi protects the stored
gas on a best effort basis. Addresses are derived from a common BIP39 seed, stored in
a secret manager for API usage. Make sure you do not supply more gas than your oracle 
needs. You can always check the balance of this address in a call to your oracle endpoint
and supply more gas if needed.

[heading :size 2 Idempotency]

Kenshi caches requests as to not send an event for processing twice, and to not deliver it
to your smart contract twice. In case of retries, Kenshi re-sends events to your endpoint
to get fresh data (this is useful if you're checking for market data, weather data, or any
data that changes frequently).

While Kenshi tries its best to prevent double-deliveries, you must make sure your smart contracts
are [link https://en.wikipedia.org/wiki/Idempotence idempotent]. You can assign a unique "requestId"
or "nonce" to each request on the blockchain and revert a transaction if it tries to re-deliver
results for an already fulfilled request.

[heading :size 2 Averaging]

It is quite easy to manipulate certain types of data. For example, if you are working with market
data, an attacker could put an order when the market conditions are in their favor. To prevent
such attacks you can employ an averaging mechanism that best fits your use case (for example send
the 90th percentile or average of the price of an asset in the past one hour, instead of its spot
price).

[heading :size 2 Signature]

Certain types of data are easily verifable on the blockchain. For example, randomness generated
by a VRF. Other types of data, such as market data, sport or weather are not so verifiable. However,
it is easy to verify the sender of such data, and to make sure they are not manipulated after being 
generated and verified by your oracle endpoint.
You can use [link https://eips.ethereum.org/EIPS/eip-712 EIP712] to sign and verify them on the blockchain.
