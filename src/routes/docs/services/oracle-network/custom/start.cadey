[heading Getting started]

Getting started with the Kenshi Oracle Network is easy. The logic part of your oracle can
be developed in the language of your choice, it only needs to implement the Custom Oracle Protocol.
You can host the logic part on any serverless (or serverful) solutions such as

[list
  [: AWS Lambda]
  [: Vercel]
  [: Cloudflare Workers]
  [: Microsoft Azure Functions]
  [: Google Cloud Functions]
  [: Netlify Functions]]
  
and others.

Once you're ready with the logic side of your oracle, you can head to the [link /dashboard Kenshi Dashboard]
and click on the "Custom Oracle" tile. Follow the instructions on the "New Oracle" form to deploy your
custom oracle.

[heading :size 2 Gas fees]

Once you deploy your oralce, you can see the address of the gas wallet associated with your oralce on the
[link /dashboard/oracle-network/custom Custom Oracle Dashboard.] You must supply enough gas to this address
for oracle network to fulfil your oracle's requests.

[alert warning
       Once you transfer gas to the associated address, the gas belongs to Kenshi and its Oracle Network
       and is not refundable. Make sure you don't supply more gas than your oracle requires.]

[heading :size 2 Nonce management]

Understanding how nonce management works within the Kenshi Oracle Network is crucial. Kenshi Nonce
Manager keeps track of the last nonce used to send a transaction from your oracle. For each oracle
request, the nonce manager assigns a nonce to the request and updates the tracked nonce in the database.

Kenshi estimates the gas required for fulfilling the oracle request and sends the transaction with
the assigned nonce and the estimated gas prices. For a total of three times, and if a transaction
doesn't get approved within a minute, Kenshi increases the gas fee and resends the transaction.

Transactions on the blockchain need to be sequential. If an address sends multiple transactions to the
blockchain and the one with the smallest nonce isn't approved, validators won't pick up any remaining
transactions for processing. In simpler words, all future transactions will be delayed until the first
transaction goes through.

To prevent future transactions from getting stuck, if a transaction still needs to be approved after
increasing the gas fee three times, the nonce manager will burn the assigned nonce and reschedule,
fulfilling the request at a later time. Burning the nonce happens by reusing it in a zero Eth transfer
transaction, which effectively cancels the original transaction. Burning nonce still uses some gas.

If too many requests get canceled due to network congestion or any other reason, the Nonce Manager
will eventually burn the entire gas in the oracle's wallet because of the above process. The Kenshi
Nonce Manager tries to prevent such scenarios and keep the nonces in order. However, Kenshi cannot
guarantee the procedure is error-free.

To prevent catastrophic events, Kenshi allows adjusting the maximum number of unresolved requests
sent to the blockchain from your oracle. When choosing a number for this parameter, you should consider
the risks involved in nonce management, as well as the needs of your application.
