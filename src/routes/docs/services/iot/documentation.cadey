[heading IoT SDK Documentation]

[alert warning This is a work in progress.]

[heading :size 2 Arduino/ESP32 library]

Check the [link Arduino https://github.com/KenshiTech/iot-sdk/tree/master/arduino]
directory on Github for header files and samples.

[heading :size 3 Arduino/ESP32 library reference]

[heading :size 4 The Blockchain enum]

This enum contains all the blockchains supported by this SDK.
Use values from this enum to initialize your MQL objects.

[code
  /**
  * @brief Blockchain enum.
  * Contains all Kenshi MQL supported
  * blockchains. Use this to initialize
  * your MQL objects.
  */
  enum Blockchain {
    FantomTestnet,
    FantomMainnet,
    BinanceTestnet,
    BinanceMainnet,
    EthereumGoerli,
    EthereumMainnet,
    AvalancheTestnet,
    AvalancheMainnet,
    PolygonMumbai,
    PolygonMainnet,
    AuroraTestnet,
    AuroraMainnet
  };]

[heading :size 4 The MQL class]

This class allows communicating with the Kenshi Deep Index MQL endpoint.
To initialize an instance of this class, you need an API key, the address
of the API key owner, and a blockchain from the Blockchain enum.

On Arduino, you need to pass a network Client instance to the "runQuery"
method of the MQL class. This instance can be any network Client instance
such as WiFiClient, EthernetClient or GSMClient.

[code
class MQL {
private:
  char *_apiKey;
  char *_owner;
  Blockchain _blockchain;

public:
  /**
   * @brief Construct a new MQL object
   *
   * @param apiKey: Your MQL API key
   * @param owner: Your MQL API key owner
   * @param blockchain: Blockchain to query
   * (Use the Blockchain enum)
   */
  MQL(char *apiKey, char *owner, Blockchain blockchain);
  /**
   * @brief Returns an instance of MongoQuery
   * for you to fill. Use this to create your
   * query.
   * @note Assigns 1024 bytes to the query object
   * @return MongoQuery
   */
  MongoQuery initQuery();
  /**
   * @brief Returns an instance of MongoQuery
   * for you to fill. Use this to create your
   * query.
   * @param size: Assign `size` bytes to the
   * query object
   * @return MongoQuery
   */
  MongoQuery initQuery(int size);
  /**
   * @brief Get the payload string for a query
   *
   * @param query: A MongoQuery instance, returned
   * from an `initQuery` call.
   * @return String: JSON representation of `query`
   */
  String getPayload(MongoQuery query);
  /**
   * @brief Runs `query` against the Kenshi data
   * clusters and return the results
   * @note Use this on Arduino
   * @param client:  An instance of Arduino
   * Client (e.g. WiFiClient, EthernetClient
   * and GSMClient.)
   * @param query: A MongoQuery instance, returned
   * from an `initQuery` call.
   * @return MongoDocuments: An instance of JsonArray.
   * Read Kenshi MQL docs for the schema.
   */
  MongoDocuments runQuery(Client &client, MongoQuery query);
  /**
   * @brief Runs `query` against the Kenshi data
   * clusters and return the results
   * @note Use this on ESP32
   * @param query: A MongoQuery instance, returned
   * from an `initQuery` call.
   * @return MongoDocuments: An instance of JsonArray.
   * Read Kenshi MQL docs for the schema.
   */
  MongoDocuments runQuery(MongoQuery query);
};]

[heading :size 4 The SyncTask class]

The SyncTask class can be used to check on the sync state of
a certain task. This is useful when you only want to process
the events emitted [italic after] your device starts up.

[code
class SyncTask {
private:
  char *_taskId;

public:
  /**
   * @brief Construct a new Sync Task object
   *
   * @param taskId: Your Kenshi Sync task ID
   */
  SyncTask(char *taskId);
  /**
   * @brief Get the last synced block number
   * @note Use this on ESP32 boards
   * @return uint: Last synced block number
   */
  uint getLastSyncedBlock();
  /**
   * @brief Get the last synced block number
   * @note Use this on Arduino boards
   * @param client: An instance of Arduino
   * Client (e.g. WiFiClient, EthernetClient
   * and GSMClient.)
   * @return uint: Last synced block number
   */
  uint getLastSyncedBlock(Client &client);
};]

[heading :size 4 The SyncTask class]

This is the root certificate for the "api.kenshi.io" domain. You need to pass this
to your secure Client instance on specific boards.

[code char *kenshiRootCert;]

[heading :size 2 Zephyr RTOS]

Check the [link zephyr https://github.com/KenshiTech/iot-sdk/tree/master/zephyr]
directory on Github for header files and samples.
